#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb  9 16:08:27 2018

@author: jacaseyclyde
"""
import numpy as np

import orbits

np.set_printoptions(precision=5, threshold=np.inf)

outpath = '../out/'


def point_point_prob(d, e):
    '''
    Returns the probability of point d being generated by a multivariate
    gaussian distribution centered on point e, with a covariance matrix cov.
    See the definition of multivariate gaussian distributions in 'Statistics,
    Data Mining, and Machine Learning in Astronomy', Ivezic et al. (2014)
    '''
    x = d - e

    exp = np.exp(-0.5 * np.matmul(x, np.matmul(H, x)))

    return exp


def point_model_prob(d, E):
    '''
    Returns the marginalized probability of a point d being generated by a
    given model E
    '''

    pdE = 0.    # probability of getting point d, given model E

    for e in E:
        pdE += point_point_prob(d, e)

    return pdE


def ln_like(theta):
    '''
    Returns the log-likelihood that the dataset D was generated by the model
    definted by parameters theta. i.e.
    lnL = ln(p(D|theta))
    D should be formatted as [[x,y]]
    '''
    E = orbits.sky(theta)

    ln_like = 0.


    for d in data:
        ln_like += np.log(point_model_prob(d, E))

    return ln_like


def ln_prior(theta):
    '''
    The log-likelihood of the prior. Currently assuming uniform
    '''
    if ((theta >= pos_min).all() and (theta < pos_max).all()):
        return 0.0
    return -np.inf


def ln_prob(theta):
    '''
    Returns the total log probability that dataset D could have been generated
    by the elliptical model with parameters theta
    '''
    lp = ln_prior(theta)
    if not np.isfinite(lp):
        return -np.inf
    ll = ln_like(theta)
    return lp + ll
