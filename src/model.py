#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb  9 16:08:27 2018

@author: jacaseyclyde
"""
import numpy as np

import orbits

np.set_printoptions(precision=5, threshold=np.inf)

outpath = '../out/'


class Model(object):

    def __init__(self, dat):
        self.data = dat
        cov = np.cov(self.data.T)
        self.H = np.linalg.inv(cov)

    def point_point_prob(self, d, e):
        '''
        Returns the probability of point d being generated by a multivariate
        gaussian distribution centered on point e, with a covariance matrix
        cov. See the definition of multivariate gaussian distributions in
        'Statistics, Data Mining, and Machine Learning in Astronomy',
        Ivezic et al. (2014)
        '''
        x = d - e

        exp = np.exp(-0.5 * np.matmul(x, np.matmul(self.H, x)))

        return exp

    def point_model_prob(self, d, E):
        '''
        Returns the marginalized probability of a point d being generated by a
        given model E
        '''

        pdE = 0.    # probability of getting point d, given model E

        for e in E:
            pdE += self.point_point_prob(d, e)

        return pdE

    def ln_like(self, theta):
        '''
        Returns the log-likelihood that the dataset D was generated by the
        model definted by parameters theta. i.e.
        lnL = ln(p(D|theta))

        D should be formatted as [[x,y]]
        '''
        E = orbits.sky(theta)

        ln_like = 0.

        for d in self.data:
            ln_like += np.log(self.point_model_prob(d, E))

        return ln_like

    def ln_prior(self, theta):
        '''
        The log-likelihood of the prior. Currently assuming uniform
        '''
        return 0.

    def ln_prob(self, theta):
        '''
        Returns the total log probability that dataset D could have been
        generated by the elliptical model with parameters theta
        '''
        lp = self.ln_prior(theta)
        if not np.isfinite(lp):
            return -np.inf
        ll = self.ln_like(theta)
        return lp + ll
